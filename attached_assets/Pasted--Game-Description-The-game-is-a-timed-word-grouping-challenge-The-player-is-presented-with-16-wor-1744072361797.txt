üéÆ Game Description
The game is a timed word grouping challenge. The player is presented with 16 word tiles and must select 4 tiles that belong to the same category or theme. There are 4 such categories in each round. The player has limited attempts to make mistakes.

üß± Core Game Mechanics
Objective
Identify 4 groups of 4 related words from a 4x4 grid (16 total words).

A group may be based on themes like: types of fabric, mythical beings, injuries, etc.

Rules
Each group must contain exactly 4 words with a strong semantic connection.

The user selects 4 words and presses "Submit".

If the selection forms a valid group:

Those tiles get marked (usually removed or locked visually).

If invalid:

The game decrements the allowed number of mistakes.

Game ends when:

All 4 groups are found, or

Mistakes run out.

üñ•Ô∏è UI Breakdown
1. Timer
Top-left: Time: 00:09 ‚Äî shows elapsed time.

Function: Stopwatch-style timer, starts on game load.

2. Grid of Word Tiles (4x4)
Each tile:

Appears as a rectangular button.

Has a background and bold word text.

Can be toggled (selected/deselected).

Max 4 can be selected at once before submission.

Selection state should be visibly styled (e.g., color highlight).

3. Control Buttons
Submit (purple button): Sends selected words for validation.

Deselect: Clears current selection.

New Game: Resets the board with a new word set.

4. Mistake Counter
Text: Mistakes remaining: 4

Decrements on invalid submissions.

5. Difficulty Selector
Buttons: Easy, Medium, Hard

Impacts how similar the word groupings are (semantic closeness).

‚öôÔ∏è Functional Requirements
Frontend
Framework: React or Vue recommended.

Components:

WordTile: handles individual word behavior.

WordGrid: handles the 4x4 layout and selection logic.

GameControls: submit, deselect, new game.

Timer: manages elapsed time.

State Management:

Selected tiles (array of 4 or fewer).

Current grid (array of 16 words).

Found groups (track which groups are solved).

Mistakes left.

Game status (ongoing, won, lost).

Backend (Optional)
Serve game data (word sets) from an API.

Each game session includes:

4 themed word groups (each 4 words).

Shuffle before serving.

Endpoint: /api/game/new

Could be pre-generated or dynamically chosen from a large set of word groupings.

Data Model (Example)
json
Copy
Edit
{
  "groups": [
    ["CORDUROY", "DENIM", "TWEED", "LINEN"],
    ["SPECTER", "PHANTOM", "GHOST", "SPIRIT"],
    ["SCAR", "STITCH", "NEEDLE", "RIB"],
    ["GENIE", "BEAST", "POKE", "TEASE"]
  ]
}
The frontend would flatten and shuffle the 4x4 board from this structure.